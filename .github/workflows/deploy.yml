name: Build and Deploy vivamq to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push vivamq-backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: megapz/vivamq-backend:latest

      - name: Build and push vivamq-ai-processor
        uses: docker/build-push-action@v6
        with:
          context: ./ai-processor
          push: true
          tags: megapz/vivamq-ai-processor:latest

      - name: Build and push vivamq-frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: megapz/vivamq-frontend:latest

      - name: Prepare deployment package
        run: |
          mkdir ../build
          cp -TR . ../build
          tar -cvf deploy.tar ../build/

      - name: Upload deployment package
        uses: actions/upload-artifact@v3
        with:
          name: deploy
          path: deploy.tar

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          mkdir ../build
          cp -TR . ../build
          tar -cvf deploy.tar ../build/

      - name: Copy deploy.tar to remote server
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key
          scp -o StrictHostKeyChecking=no -i private_key deploy.tar $DROPLET_USER@$DROPLET_IP:~/

      - name: Deploy to DigitalOcean Droplet
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin
          ssh -o StrictHostKeyChecking=no -i private_key $DROPLET_USER@$DROPLET_IP << 'EOF'
            tar -xvf deploy.tar
            cd build
            if command -v docker compose &> /dev/null; then
              docker compose pull
              docker compose up -d
            else
              echo "docker compose not found"
            fi
          EOF
