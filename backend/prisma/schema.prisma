generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  email     String       @unique
  name      String
  phone     String?
  password  String
  role      Role         @default(STUDENT)
  deletedAt DateTime?
  rubrics   Rubric[]
  units     Unit[]       @relation("UnitOwner")
  accesses  UnitAccess[]
}

model Unit {
  id          String       @id @default(uuid())
  name        String
  sessionId   String
  ownerId     String
  description String       @default("")
  deletedAt   DateTime?
  assignments Assignment[]
  tutors      Tutor[]
  owner       User         @relation("UnitOwner", fields: [ownerId], references: [id])
  session     Session      @relation(fields: [sessionId], references: [id])
  accesses    UnitAccess[]
}

model Session {
  id          String    @id @default(uuid())
  displayName String
  year        Int
  term        Term
  deletedAt   DateTime?
  units       Unit[]
}

model Tutor {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  unitId    String
  deletedAt DateTime?
  unit      Unit      @relation(fields: [unitId], references: [id])
}

model Student {
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  deletedAt   DateTime?
  submissions Submission[]
}

model Assignment {
  id                     String       @id @default(uuid())
  name                   String
  specs                  String
  settings               String
  unitId                 String
  deletedAt              DateTime?
  description            String?
  unit                   Unit         @relation(fields: [unitId], references: [id])
  rubrics                Rubric[]
  submissions            Submission[]
  latestVivaUpdate       DateTime?
  latestSubmissionUpload DateTime?
  modifiedAt             DateTime?    @updatedAt
  createdAt              DateTime     @default(now())
  createdDate            DateTime     @default(now())
}

model Submission {
  id                  String             @id @default(uuid())
  assignmentId        String
  studentId           String?
  submissionFile      String
  status              String
  vivaStatus          VIVASTATUS         @default(NOTSTARTED)
  studentCode         String?
  deletedAt           DateTime?
  qualityAssessment   String?
  summary             String?
  vivaRequestDate     DateTime?          @default(now())
  createdAt           DateTime           @default(now())
  assignment          Assignment         @relation(fields: [assignmentId], references: [id])
  student             Student?           @relation(fields: [studentId], references: [id])
  vivaQuestions       VivaQuestion[]
  submissionSummary   SubmissionSummary?
  submissionSummaryId String?
}

model SubmissionSummary {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  submissionId String     @unique
  data         Json       @db.Json
  status       String
  deletedAt    DateTime?
  category     String?
  submission   Submission @relation(references: [id], fields: [submissionId])
}

model VivaQuestion {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  submissionId String
  question     Json       @db.Json
  status       String
  deletedAt    DateTime?
  category     String?
  submission   Submission @relation(fields: [submissionId], references: [id])
}

model UnitAccess {
  id        String       @id @default(uuid())
  userId    String
  unitId    String
  role      AccessRole
  status    AccessStatus @default(ACCEPTED)
  deletedAt DateTime?
  unit      Unit         @relation(fields: [unitId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@unique([userId, unitId])
}

model Rubric {
  id             String       @id @default(uuid())
  createdById    String
  assignmentId   String?
  deletedAt      DateTime?
  rubricData     Json?        @db.Json
  title          String
  status         RubricStatus @default(PENDING)
  createdAt      DateTime     @default(now())
  assignment     Assignment?  @relation(fields: [assignmentId], references: [id])
  createdBy      User         @relation(fields: [createdById], references: [id])
  modifiedAt     DateTime?    @updatedAt
  dataModifiedAt DateTime?    @updatedAt
}

enum RubricStatus {
  PENDING
  COMPLETED
  ERROR
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum AccessRole {
  READ_ONLY
  READ_WRITE
}

enum AccessStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Term {
  SESSION_1
  SESSION_2
  SESSION_3
  ALL_YEAR
}

enum VIVASTATUS {
  NOTSTARTED
  INPROGRESS
  COMPLETED
  ERROR
}
