datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          UserRole
  phone         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  units         Unit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum UserRole {
  TUTOR
  CONVENOR
}

model Unit {
  id          String       @id @default(uuid())
  name        String
  code        String
  year        String
  session     String
  convenorId  String
  convenor    User         @relation(fields: [convenorId], references: [id])
  assignments Assignment[]
}

model Assignment {
  id                String       @id @default(uuid())
  unitId            String
  name              String
  description       String?
  dueDate           DateTime?
  submissions       Int?
  unit              Unit         @relation(fields: [unitId], references: [id])
  submissionRecords Submission[]
  vivas             Viva[]
}

model Submission {
  id             String         @id @default(uuid())
  assignmentId   String
  studentName    String
  studentId      String
  submissionDate DateTime
  status         String
  content        String?
  assignment     Assignment     @relation(fields: [assignmentId], references: [id])
  pdfSubmission  PDFSubmission?
  questions      Question[]
}

model Viva {
  id           String         @id @default(uuid())
  assignmentId String
  studentName  String
  status       String
  assignment   Assignment     @relation(fields: [assignmentId], references: [id])
  questions    VivaQuestion[]
}

model VivaQuestion {
  id     String @id @default(uuid())
  vivaId String
  text   String
  status String
  viva   Viva   @relation(fields: [vivaId], references: [id])
}

model Rubric {
  id           String      @id @default(uuid())
  name         String
  unitId       String
  assignmentId String
  year         String
  session      String
  criteria     Criterion[]
}

model Criterion {
  id          Int    @id @default(autoincrement())
  rubricId    String
  name        String
  marks       Int
  descriptors Json
  rubric      Rubric @relation(fields: [rubricId], references: [id])
}

// Add this to your existing Prisma schema

model PDFSubmission {
  id            String     @id @default(uuid())
  submissionId  String     @unique
  fileName      String
  fileContent   Bytes
  extractedText String?
  submission    Submission @relation(fields: [submissionId], references: [id])
}

model Question {
  id           String     @id @default(uuid())
  submissionId String
  text         String
  category     String
  submission   Submission @relation(fields: [submissionId], references: [id])
}
