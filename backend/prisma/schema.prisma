generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  email     String       @unique
  name      String
  phone     String?
  password  String
  role      Role         @default(STUDENT)
  units     Unit[]       @relation("UnitOwner")
  accesses  UnitAccess[]
}

model Unit {
  id          String       @id @default(uuid())
  name        String
  sessionId   String
  ownerId     String
  owner       User         @relation("UnitOwner", fields: [ownerId], references: [id])
  session     Session      @relation(fields: [sessionId], references: [id])
  tutors      Tutor[]
  assignments Assignment[]
  accesses    UnitAccess[]
}

model Session {
  id          String @id @default(uuid())
  displayName String
  year        Int
  term        Term
  units       Unit[]
}

model Tutor {
  id     String @id @default(uuid())
  name   String
  email  String @unique
  unitId String
  unit   Unit   @relation(fields: [unitId], references: [id])
}

model Student {
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  submissions Submission[]
}

model Assignment {
  id          String       @id @default(uuid())
  name        String
  specs       String
  settings    String
  unitId      String
  unit        Unit         @relation(fields: [unitId], references: [id])
  submissions Submission[]
}

model Submission {
  id             String         @id @default(uuid())
  assignmentId   String
  studentId      String?
  submissionFile String
  status         String
  assignment     Assignment     @relation(fields: [assignmentId], references: [id])
  student        Student?       @relation(fields: [studentId], references: [id])
  vivaQuestions  VivaQuestion[]
  vivaStatus     VIVASTATUS     @default(NOTSTARTED)
}

model VivaQuestion {
  id           String     @id @default(uuid())
  submissionId String
  question     Json       @db.Json
  status       String
  submission   Submission @relation(fields: [submissionId], references: [id])
}

model UnitAccess {
  id     String       @id @default(uuid())
  userId String
  unitId String
  role   AccessRole
  status AccessStatus @default(ACCEPTED)
  user   User         @relation(fields: [userId], references: [id])
  unit   Unit         @relation(fields: [unitId], references: [id])

  @@unique([userId, unitId])
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum AccessRole {
  READ_ONLY
  READ_WRITE
}

enum AccessStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Term {
  SESSION_1
  SESSION_2
  SESSION_3
  ALL_YEAR
}

enum VIVASTATUS {
  NOTSTARTED
  INPROGRESS
  COMPLETED
}
