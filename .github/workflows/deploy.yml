name: Build and Deploy to DigitalOcean
on:
  push:
    branches:
      - main
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the latest code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup SSH for connecting to the DigitalOcean Droplet
      - name: Setup SSH for DigitalOcean
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
        run: |
          mkdir -p ~/.ssh # Create the .ssh directory if it doesn't exist
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts

      # Add Node.js setup
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      # Install and build frontend
      - name: Build frontend
        run: |
          cd frontend
          scp $DROPLET_USER@$DROPLET_IP:~/.env .
          npm install
          npm run build
          # remove node_modules to reduce the size of the zipped repository
          rm -rf node_modules
          rm package-lock.json

      # Install and build backend
      - name: Build backend
        run: |
          cd backend
          scp $DROPLET_USER@$DROPLET_IP:~/.env .
          npm install
          npm run build
          # remove node_modules to reduce the size of the zipped repository
          rm -rf node_modules
          rm package-lock.json

      # Install and build AI microservice
      - name: Build AI microservice
        run: |
          cd ai-processor
          scp $DROPLET_USER@$DROPLET_IP:~/.env .
          npm install
          npm run build
          # remove node_modules to reduce the size of the zipped repository
          rm -rf node_modules
          rm package-lock.json

      # Step 6: Zip the repository
      - name: Zip repository
        run: zip -r -qq repo.zip .

      # Step 7: Copy the zipped repository to the remote system
      - name: Copy zipped repository to remote
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
        run: |
          scp -o StrictHostKeyChecking=no repo.zip $DROPLET_USER@$DROPLET_IP:~/

      - name: Deploy to DigitalOcean Droplet
        env:
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
        run: |
          ssh $DROPLET_USER@$DROPLET_IP << 'EOF'
            # Stop existing servers
            pm2 stop all
            pm2 delete all
            
            unzip -o -qq ~/repo.zip -d ~/
            
            cp .env ~/frontend/
            cp .env ~/backend/
            cp .env ~/ai-processor/

            # Install pm2 globally
            npm install -g pm2

            cd frontend
            npm install
            pm2 start npm --name "frontend" -- start &
            cd ../backend
            npm install
            pm2 start npm --name "backend" -- start &
            cd ../ai-processor
            npm install
            pm2 start npm --name "ai-processor" -- start
          EOF
